# cloudbuild.yaml for Android CI/CD

# Define substitutions that can be overridden at build time or in trigger settings.
# _BUCKET_NAME should be set to your GCS bucket used for caching and artifacts.
substitutions:
  _BUCKET_NAME: 'poc-app-releases'
  _GCS_KEYSTORE_PATH: 'secrets/keystore.jks' # Path to the keystore in your GCS bucket
  _KEYSTORE_FILE: '/workspace/app/keystore.jks' # Absolute path to the keystore file in the build environment
  _KEY_ALIAS: 'poc-key'           # Default alias for your release key
  _KEYSTORE_PASSWORD: '123456' # IMPORTANT: Replace with your actual keystore password or set via trigger
  _KEY_PASSWORD: '123456'           # IMPORTANT: Replace with your actual key password or set via trigger

steps:
  # 1. Restore Gradle cache from GCS
  # The Gradle home directory inside the openjdk:17-jdk container is /root/.gradle
  # This step attempts to download the cache; if it doesn't exist, it continues.
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'restore-gradle-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Attempting to restore Gradle cache from gs://${_BUCKET_NAME}/android-cache/gradle_home to /workspace/.gradle_home"
        mkdir -p /workspace/.gradle_home
        gsutil -m rsync -r gs://${_BUCKET_NAME}/android-cache/gradle_home /workspace/.gradle_home || echo "Gradle cache not found for /workspace/.gradle_home, proceeding without cache."
    waitFor: ['-'] # Start immediately, does not depend on other steps

  # New step: Download keystore from GCS
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'download-keystore-from-gcs'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Attempting to download keystore from gs://${_BUCKET_NAME}/${_GCS_KEYSTORE_PATH} to /workspace/app/keystore.jks"
        mkdir -p /workspace/app
        gsutil cp gs://${_BUCKET_NAME}/${_GCS_KEYSTORE_PATH} /workspace/app/keystore.jks || \
          echo "WARNING: Keystore not found at gs://${_BUCKET_NAME}/${_GCS_KEYSTORE_PATH}. If it's not in the repo, signing will fail."
    waitFor: ['restore-gradle-cache']

  # 2. Grant execute permission for gradlew, check versions, and create/permit .gradle_home
  # Using openjdk:17-jdk for this initial step as it's lightweight.
  # The mobiledevops image also contains a JDK.
  - name: 'openjdk:17-jdk'
    id: 'set-gradlew-executable-and-prepare-gradle-dirs'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod +x gradlew && \\
        ls -l gradlew && \\
        ./gradlew --version && \\
        echo "Ensuring directories and setting permissions..." && \\
        mkdir -p /workspace/.gradle_home && chmod -R 777 /workspace/.gradle_home && \\
        echo "Permissions for /workspace/.gradle_home after chmod by openjdk:" && \\
        ls -ld /workspace/.gradle_home && \\
        echo "Contents and permissions of /workspace/.gradle_home after chmod by openjdk:" && \\
        ls -lA /workspace/.gradle_home && \\
        echo "Permissions for /workspace/.gradle_home/daemon if it exists after chmod by openjdk:" && \\
        ls -ld /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found during openjdk step" && \\
        echo "Contents and permissions of /workspace/.gradle_home/daemon if it exists after chmod by openjdk:" && \\
        ls -lA /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found during openjdk step" && \\
        echo "Permissions for /workspace/.gradle_home/daemon/8.11.1 if it exists after chmod by openjdk:" && \\
        ls -ld /workspace/.gradle_home/daemon/8.11.1 || echo "/workspace/.gradle_home/daemon/8.11.1 not found during openjdk step" && \\
        mkdir -p /workspace/.gradle && chmod -R 777 /workspace/.gradle && ls -ld /workspace/.gradle && \\
        mkdir -p /workspace/build && chmod -R 777 /workspace/build && ls -ld /workspace/build && \\
        mkdir -p /workspace/app/build && chmod -R 777 /workspace/app/build && ls -ld /workspace/app/build && \\
        mkdir -p /workspace/.kotlin && chmod -R 777 /workspace/.kotlin && ls -ld /workspace/.kotlin # Also ensure .kotlin is pre-created and 777
    waitFor:
      - 'restore-gradle-cache'

  # This step forcefully cleans build directories before Gradle tasks.
  - name: 'openjdk:17-jdk' 
    id: 'force-clean-build-dirs'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Force cleaning build directories..."
        rm -rf /workspace/build/*
        rm -rf /workspace/app/build/*
        echo "Re-creating /workspace/build and /workspace/app/build to ensure they exist for subsequent steps"
        mkdir -p /workspace/build && chmod -R 777 /workspace/build
        mkdir -p /workspace/app/build && chmod -R 777 /workspace/app/build
        echo "Done force cleaning and re-creating build directories."
    waitFor:
      - 'set-gradlew-executable-and-prepare-gradle-dirs'

  # 3. Download dependencies
  # Using openjdk:17-jdk. The Android SDK builder could also be used here.
  - name: 'mobiledevops/android-sdk-image:34.0.0'
    id: 'download-dependencies'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "--- Inside download-dependencies step (mobiledevops container) ---"
        echo "Current user and group IDs:"
        id -u; id -g

        echo "Attempting to clean and recreate Gradle daemon directory for 8.11.1..."
        rm -rf /workspace/.gradle_home/daemon/8.11.1
        mkdir -p /workspace/.gradle_home/daemon/8.11.1 && chmod -R 777 /workspace/.gradle_home/daemon/8.11.1
        echo "Listing contents of /workspace/.gradle_home/daemon/ after cleanup:"
        ls -lA /workspace/.gradle_home/daemon/

        echo "Permissions for /workspace/.gradle_home as seen by mobiledevops container:"
        ls -ld /workspace/.gradle_home
        echo "Contents of /workspace/.gradle_home as seen by mobiledevops container:"
        ls -lA /workspace/.gradle_home
        echo "Permissions for /workspace/.gradle_home/daemon as seen by mobiledevops container:"
        ls -ld /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found"
        echo "Contents of /workspace/.gradle_home/daemon as seen by mobiledevops container:"
        ls -lA /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found"
        echo "Permissions for /workspace/.gradle_home/daemon/8.11.1 as seen by mobiledevops container:"
        ls -ld /workspace/.gradle_home/daemon/8.11.1 || echo "/workspace/.gradle_home/daemon/8.11.1 not found"
        echo "Permissions for the specific file /workspace/.gradle_home/daemon/8.11.1/registry.bin if it exists:"
        ls -l /workspace/.gradle_home/daemon/8.11.1/registry.bin || echo "/workspace/.gradle_home/daemon/8.11.1/registry.bin not found"
        echo "Attempting to download dependencies..."
        ./gradlew --gradle-user-home /workspace/.gradle_home dependencies --stacktrace
        # echo "Attempting to stop Gradle daemon after dependencies..." # Removing --stop for now
        # ./gradlew --gradle-user-home /workspace/.gradle_home --stop || echo "Gradle stop failed or no daemon running, continuing..."
        echo "--- Finished download-dependencies step ---"
    waitFor:
      - 'force-clean-build-dirs'

  # 4. Run lint
  # Switching to an Android SDK builder image
  - name: 'mobiledevops/android-sdk-image:34.0.0'
    id: 'run-lint'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "--- Inside run-lint step (mobiledevops container) ---"
        echo "Current user and group IDs:"
        id -u; id -g

        echo "Attempting to clean and recreate Gradle daemon directory for 8.11.1 before lint..."
        rm -rf /workspace/.gradle_home/daemon/8.11.1
        mkdir -p /workspace/.gradle_home/daemon/8.11.1 && chmod -R 777 /workspace/.gradle_home/daemon/8.11.1
        echo "Listing contents of /workspace/.gradle_home/daemon/ after cleanup:"
        ls -lA /workspace/.gradle_home/daemon/

        echo "Permissions for /workspace/.gradle_home as seen by mobiledevops container (before lint):"
        ls -ld /workspace/.gradle_home
        echo "Contents of /workspace/.gradle_home as seen by mobiledevops container (before lint):"
        ls -lA /workspace/.gradle_home
        echo "Permissions for /workspace/.gradle_home/daemon as seen by mobiledevops container (before lint):"
        ls -ld /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found"
        echo "Contents of /workspace/.gradle_home/daemon as seen by mobiledevops container (before lint):"
        ls -lA /workspace/.gradle_home/daemon || echo "/workspace/.gradle_home/daemon not found"
        echo "Permissions for /workspace/.gradle_home/daemon/8.11.1 as seen by mobiledevops container (before lint):"
        ls -ld /workspace/.gradle_home/daemon/8.11.1 || echo "/workspace/.gradle_home/daemon/8.11.1 not found"
        echo "Contents of /workspace/.gradle_home/daemon/8.11.1 as seen by mobiledevops container (before lint):"
        ls -lA /workspace/.gradle_home/daemon/8.11.1 || echo "/workspace/.gradle_home/daemon/8.11.1 not found"
        echo "Permissions for /workspace/.gradle_home/daemon/8.11.1/registry.bin if it exists (before lint):"
        ls -l /workspace/.gradle_home/daemon/8.11.1/registry.bin || echo "/workspace/.gradle_home/daemon/8.11.1/registry.bin not found (before rm)"
        
        # echo "Attempting to remove Gradle registry.bin and its lock file..." (already handled by daemon dir removal)

        echo "Attempting to run lint..."
        ./gradlew --gradle-user-home /workspace/.gradle_home lint --stacktrace
        # echo "Attempting to stop Gradle daemon after lint..." # Removing --stop for now
        # ./gradlew --gradle-user-home /workspace/.gradle_home --stop || echo "Gradle stop failed or no daemon running, continuing..."
        echo "--- Finished run-lint step ---"
    waitFor:
      - 'download-dependencies'

  # 5. Run unit tests ("run test")
  # Switching to an Android SDK builder image
  - name: 'mobiledevops/android-sdk-image:34.0.0'
    id: 'run-unit-tests'
    entrypoint: './gradlew'
    args: ['--gradle-user-home', '/workspace/.gradle_home', 'testDebugUnitTest', '--stacktrace']
    waitFor:
      - 'run-lint'

  # 6. Build APK (Debug)
  # Switching to an Android SDK builder image
  - name: 'mobiledevops/android-sdk-image:34.0.0'
    id: 'build-apk-debug'
    entrypoint: './gradlew'
    args: ['--gradle-user-home', '/workspace/.gradle_home', 'assembleDebug', '--stacktrace']
    waitFor:
      - 'run-unit-tests'

  # 7. Build APK (Release) ("release the app")
  # Switching to an Android SDK builder image
  - name: 'mobiledevops/android-sdk-image:34.0.0'
    id: 'build-apk-release'
    entrypoint: './gradlew'
    args: [
        '--gradle-user-home', '/workspace/.gradle_home',
        'assembleRelease',
        '-Pandroid.injected.signing.store.file=${_KEYSTORE_FILE}',
        '-Pandroid.injected.signing.store.password=${_KEYSTORE_PASSWORD}',
        '-Pandroid.injected.signing.key.alias=${_KEY_ALIAS}',
        '-Pandroid.injected.signing.key.password=${_KEY_PASSWORD}',
        '--stacktrace'
      ]
    waitFor:
      - 'build-apk-debug'

  # Debug: List contents of the release APK directory
  - name: 'gcr.io/cloud-builders/gcloud' # Using a common image with ls
    id: 'debug-list-release-apk-files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "--- Debugging: Listing expected APK output directories ---"
        echo "Listing /workspace/app/build/outputs/apk/release/:"
        ls -Al /workspace/app/build/outputs/apk/release/ || echo "Directory /workspace/app/build/outputs/apk/release/ not found or ls failed."
        echo "Listing /workspace/app/build/outputs/apk/:"
        ls -Al /workspace/app/build/outputs/apk/ || echo "Directory /workspace/app/build/outputs/apk/ not found or ls failed."
        echo "Listing /workspace/app/build/outputs/:"
        ls -Al /workspace/app/build/outputs/ || echo "Directory /workspace/app/build/outputs/ not found or ls failed."
        echo "--- End Debugging ---"
    waitFor:
      - 'build-apk-release'

  # 8. Save Gradle cache to GCS
  # The path to .gradle might differ if the Android builder uses a different user/home.
  # Assuming /root/.gradle for now, adjust if build logs show a different path.
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'save-gradle-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Saving Gradle cache from /workspace/.gradle_home to gs://${_BUCKET_NAME}/android-cache/gradle_home"
        if [ -d /workspace/.gradle_home ]; then
          gsutil -m rsync -r /workspace/.gradle_home gs://${_BUCKET_NAME}/android-cache/gradle_home || echo "Failed to save /workspace/.gradle_home"
        else
          echo "Gradle cache directory /workspace/.gradle_home not found to save."
        fi
    waitFor:
      - 'debug-list-release-apk-files' # Updated to wait for the new debug step

# Artifacts to store in GCS after a successful build
artifacts:
  objects:
    # Artifacts will be stored in gs://{_BUCKET_NAME}/android-artifacts/
    location: 'gs://${_BUCKET_NAME}/android-artifacts/'
    paths:
      - 'app/build/outputs/apk/debug/app-debug.apk'
      - 'app/build/outputs/apk/release/app-release.apk'
  # Optionally specify images to push to GCR if you were building Docker images
  # images: ['gcr.io/$PROJECT_ID/my-image']

# Optional: Specify machine type for the build steps for better performance
options:
  machineType: 'E2_HIGHCPU_8' # Example, check available machine types

# Optional: Timeout for the build
# timeout: "1200s" # 20 minutes