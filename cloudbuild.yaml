steps:
# Step 1: Set up Java Development Kit (JDK) - essential for Android builds
- name: 'gcr.io/cloud-builders/java'
  args: ['java', '-version'] # Just to verify Java is present

# Step 2: Define ANDROID_HOME. The Android SDK is usually in /opt/android-sdk/ on Cloud Build
# You might need to verify the exact path or use a custom builder if it's different.
# For standard Android builds, /root/android-sdk is common for 'gradlew' command
- name: 'ubuntu' # Or any builder that allows environment variables to be set
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Setting ANDROID_HOME and PATH for SDK tools..."
      export ANDROID_HOME=/root/android-sdk # Common path in many Cloud Build Android images
      export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator

      # You can also write it to local.properties if you prefer, but ANDROID_HOME is often enough
      # echo "sdk.dir=${ANDROID_HOME}" > local.properties

      # Pass these environment variables to the next steps.
      # Cloud Build automatically propagates environment variables set in previous steps
      # if they are exported in a script or defined at the step level.
      # For direct passing, define the env property for the gradle step.

# Step 3: Run your Android build using Gradle Wrapper
# Use the 'gradle' builder, which is suitable for Android projects.
- name: 'gcr.io/cloud-builders/gradle'
  args: ['clean', ':app:assembleDebug'] # Example: clean and build debug APK
  env: # Explicitly pass ANDROID_HOME to the gradle step for robustness
    - 'ANDROID_HOME=/root/android-sdk' # Ensure this matches the path where SDK is installed
  # dir: 'app' # If your build.gradle is in the 'app' directory, specify it here